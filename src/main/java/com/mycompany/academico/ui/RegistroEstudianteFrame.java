/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.academico.ui;

import com.mycompany.academico.domain.Estudiante;
import com.mycompany.academico.domain.Nota; 
import com.mycompany.academico.service.CalculoService;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.mycompany.academico.service.ArchivoService;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.IOException;

/** 
 *
 * @author Coder
 */
public class RegistroEstudianteFrame extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(RegistroEstudianteFrame.class.getName());

    // --- Variables de Instancia ---
    private final List<Estudiante> listaEstudiantes = new ArrayList<>(); // Lista para almacenar estudiantes
    private DefaultTableModel tableModel; // Modelo para la JTable
    private final CalculoService calculoService = new CalculoService();
    private final ArchivoService archivoService = new ArchivoService();
    
    
    // FunciÃ³n para validar una sola nota
    private boolean esNotaValida(double nota) {
        return nota >= 0.0 && nota <= 5.0;
    }
    
    /**
     * Creates new form RegistroEstudianteFrame
     */
    public RegistroEstudianteFrame() {
        initComponents();
        inicializarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        lblEdad = new javax.swing.JLabel();
        txtEdad = new javax.swing.JSpinner();
        lblNota1 = new javax.swing.JLabel();
        txtNota1 = new javax.swing.JTextField();
        lblNota2 = new javax.swing.JLabel();
        txtNota2 = new javax.swing.JTextField();
        lblNota3 = new javax.swing.JLabel();
        txtNota3 = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnEstadistica = new javax.swing.JButton();
        btnCalcular = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEstudiantes = new javax.swing.JTable();
        lblPromedio = new javax.swing.JLabel();
        lblNotaMax = new javax.swing.JLabel();
        lblResultado = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnGuardarCsv = new javax.swing.JButton();
        btnCargarCsv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        lblNombre.setText("Nombre:");

        lblEdad.setText("Edad:");

        lblNota1.setText("Nota 1:");

        lblNota2.setText("Nota 2:");

        lblNota3.setText("Nota 3:");

        btnGuardar.setText("guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEstadistica.setText("estadistica");

        btnCalcular.setText("calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        tableEstudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Edad", "Nota 1", "Nota 2", "Nota 3"
            }
        ));
        jScrollPane1.setViewportView(tableEstudiantes);

        lblPromedio.setText("Promedio");

        lblNotaMax.setText("Nota Maxima");

        lblResultado.setText("Resultado");

        btnLimpiar.setText("limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnSalir.setText("salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnGuardarCsv.setText("Guardar CSV");
        btnGuardarCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCsvActionPerformed(evt);
            }
        });

        btnCargarCsv.setText("Cargar CSV");
        btnCargarCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarCsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblNombre)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblEdad)
                                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPromedio, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                            .addGap(10, 10, 10))
                                        .addComponent(lblNotaMax)
                                        .addComponent(lblResultado)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblNota3)
                                    .addComponent(lblNota2)
                                    .addComponent(lblNota1)
                                    .addComponent(txtNota1)
                                    .addComponent(txtNota2)
                                    .addComponent(txtNota3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCalcular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnGuardar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnLimpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(btnGuardarCsv)
                                .addGap(18, 18, 18)
                                .addComponent(btnCargarCsv)
                                .addGap(18, 18, 18)
                                .addComponent(btnEstadistica))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNota1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblEdad))
                            .addComponent(txtNota1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNota2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNota2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNota3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNota3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPromedio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNotaMax)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblResultado))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardarCsv)
                        .addComponent(btnCargarCsv)
                        .addComponent(btnEstadistica))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCalcular)
                        .addComponent(btnGuardar)
                        .addComponent(btnLimpiar)))
                .addGap(33, 33, 33)
                .addComponent(btnSalir)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // --- mÃ©todo para inicializar la tabla ---
    private void inicializarTabla(){
        String[] columnNames = {"Nombre", "Edad", "Nota 1", "Nota 2", "Nota 3"};
        tableModel = new DefaultTableModel(columnNames, 0);
        tableEstudiantes.setModel(tableModel);
    }
    
    // --- mÃ©todo para actualizar la tabla ---
    private void actualizarTabla() {
    // Limpia las filas existentes
    tableModel.setRowCount(0);
    // Itera sobre la lista de estudiantes y aÃ±ade cada uno como una nueva fila
    for (Estudiante est : listaEstudiantes) {
        Object[] rowData = {
            est.getNombre(),
            est.getEdad(),
            est.getNotas().get(0).getValor(), // Nota 1
            est.getNotas().get(1).getValor(), // Nota 2
            est.getNotas().get(2).getValor()  // Nota 3
        };
        tableModel.addRow(rowData);
    }
}
    
    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        String nombre = txtNombre.getText().trim();
        String nota1txt = txtNota1.getText().trim();
        String nota2txt = txtNota2.getText().trim();
        String nota3txt = txtNota3.getText().trim();
        
        // Validar que los campos no estÃ©n vacÃ­os
        if (nombre.isEmpty() || nota1txt.isEmpty() || nota2txt.isEmpty() || nota3txt.isEmpty()) {
            JOptionPane.showMessageDialog(
                null,
                "Debe llenar todos los campos antes de calcular.",
                "Error de ValidaciÃ³n",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
   
        try{
            int edad = (Integer) txtEdad.getValue();
            double nota1 = Double.parseDouble(nota1txt);
            double nota2 = Double.parseDouble(nota2txt);
            double nota3 = Double.parseDouble(nota3txt);
            // Validar rango de edad
            if (edad <= 0 || edad >= 100) {
                JOptionPane.showMessageDialog(
                    null,
                    "La edad debe estar entre 1 y 99.",
                    "Error de ValidaciÃ³n",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            
            
            
            // Validar rango de notas
            if (!esNotaValida(nota1) || !esNotaValida(nota2) || !esNotaValida(nota3)) {
                JOptionPane.showMessageDialog(
                    null,
                    "Las notas deben estar entre 0.0 y 5.0.",
                    "Error de ValidaciÃ³n",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
            
        // Al cumplirse validaciones -> Crear el estudiante
        Estudiante estudiante = new Estudiante(nombre, edad, nota1, nota2, nota3);
        
        // Usar CalculoService
        double promedio = calculoService.promedio(estudiante.getNotas());
        Nota maxNota = calculoService.notaMaxima(estudiante.getNotas());
        boolean aprobado = calculoService.aprobado(promedio);
        
        // Mostrar resultados
        lblPromedio.setText("Promedio: " + promedio);
        lblNotaMax.setText("Nota MÃ¡xima: " + maxNota.getValor());
        lblResultado.setText(aprobado ? "Aprobado" : "Reprobado");
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(
                null,
                "Las notas deben ser valores numÃ©ricos vÃ¡lidos.",
                "Error de Formato",
                JOptionPane.ERROR_MESSAGE
            );
        }
         
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNombre.setText("");
        txtEdad.setValue(0);
        txtNota1.setText("");
        txtNota2.setText("");
        txtNota3.setText("");
        lblPromedio.setText("Promedio:");
        lblNotaMax.setText("Nota Max:");
        lblResultado.setText("Resultado:");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        String nombre = txtNombre.getText().trim();
        String nota1txt = txtNota1.getText();
        String nota2txt = txtNota2.getText();
        String nota3txt = txtNota3.getText();
        
        // validar que campos no esten vacios
        if(nombre.isEmpty() || nota1txt.isEmpty() || nota2txt.isEmpty() || nota3txt.isEmpty()){
            // mensaje de error
            JOptionPane.showMessageDialog(
                    null, 
                    "Los campos no pueden estar vacios", 
                    "Error de ValidaciÃ³n", 
                    JOptionPane.ERROR_MESSAGE);
            return;
        } 
            
       
        try{
             //Validar que las notas sean numÃ©ricas y estÃ©n en un rango vÃ¡lido.
             double nota1 = Double.parseDouble(nota1txt);
             double nota2 = Double.parseDouble(nota2txt);
             double nota3 = Double.parseDouble(nota3txt);
             int edad = (Integer) txtEdad.getValue();
             
             if (edad <= 0 || edad >= 100) {
                 JOptionPane.showMessageDialog(
                         null, 
                         "La edad debe estar en un rango validoÃ .", 
                         "Error de ValidaciÃ³n", 
                         JOptionPane.ERROR_MESSAGE);
                 return;
             }
             
             if(nota1 < 0.0 || nota1 > 5.0 || nota2 < 0.0 || nota2 > 5.0 || nota3 < 0.0 || nota3 > 5.0){
                 // mensaje de error
                 JOptionPane.showMessageDialog(
                         null, 
                         "Las notas deben estar entre 0.0  y 5.0.", 
                         "Error de ValidaciÃ³n", 
                         JOptionPane.ERROR_MESSAGE);
                 return;
             }
             
             // si pasan las validaciones se puede crear el objeto estudiante y guardarlo.
             Estudiante estudiante = new Estudiante(nombre, edad, nota1, nota2, nota3);
             
             // AÃ±adir el estudiante a la lista
             listaEstudiantes.add(estudiante);
              
              // Actualizar la tabla para mostrar el nuevo estudiante
             actualizarTabla();
             
             // AquÃ­ irÃ­a la lÃ³gica para aÃ±adir el estudiante a la tabla.
             JOptionPane.showMessageDialog(
                     this, 
                     "Estudiante guardado correctamente.");
             
             
        }catch (NumberFormatException e) {
            // Capturar el error si los datos no son numÃ©ricos.
            JOptionPane.showMessageDialog(
                    this, 
                    "Las notas deben ser valores numÃ©ricos.", 
                    "Error de Formato", 
                    JOptionPane.ERROR_MESSAGE);

        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCsvActionPerformed
        
        if (listaEstudiantes.isEmpty()) {
            JOptionPane.showMessageDialog(
                null,
                "No hay estudiantes para guardar.",
                "Advertencia",
                JOptionPane.WARNING_MESSAGE
            );
            return;
        }
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Guardar archivo CSV");
        int opcion = chooser.showSaveDialog(this);
        
        if (opcion != JFileChooser.APPROVE_OPTION) {
            // el usuario cancelÃ³
            return;
        }
        
        File file = chooser.getSelectedFile();
        
        
        // si el usuario no escribiÃ³ .csv, se lo aÃ±adimos
        if (!file.getName().toLowerCase().endsWith(".csv")) {
            file = new File(file.getParentFile(), file.getName() + ".csv");
        }
        
        try {
            // Llamamos al mÃ©todo que requiere File
            archivoService.guardarCSV(listaEstudiantes, file);
            JOptionPane.showMessageDialog(
                    this, 
                    "Archivo CSV guardado correctamente:\n" + file.getAbsolutePath());
        } catch (IOException ex) {
            // Registrar y mostrar error amable al usuario
            logger.log(java.util.logging.Level.SEVERE, "Error guardando CSV", ex);
            JOptionPane.showMessageDialog(
                    this, 
                    "Error al guardar CSV:\n" + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }   
    }//GEN-LAST:event_btnGuardarCsvActionPerformed
    
    private void btnCargarCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarCsvActionPerformed
       
         // Crear un JFileChooser para que el usuario seleccione el archivo
        JFileChooser fileChooser = new JFileChooser();
        
         // Mostrar el diÃ¡logo de apertura de archivo
        int userSelection = fileChooser.showOpenDialog(this);
        
        // Si el usuario selecciona un archivo y presiona "Abrir"
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            // Obtener el archivo seleccionado
            File fileToOpen = fileChooser.getSelectedFile();
            
            try {
                // Llamar al mÃ©todo cargarCSV del servicio para leer los estudiantes del archivo
                List<Estudiante> estudiantesCargados = archivoService.cargarCSV(fileToOpen);
                
                // Limpiar la lista actual de estudiantes y aÃ±adir los nuevos
                listaEstudiantes.clear();
                listaEstudiantes.addAll(estudiantesCargados);
                
                // Actualizar la tabla para mostrar los estudiantes reciÃ©n cargados
                actualizarTabla();
                
                // Mostrar un mensaje de Ã©xito
                if (!estudiantesCargados.isEmpty()) {
                    JOptionPane.showMessageDialog(
                        null,
                        "Estudiantes cargados exitosamente. Cantidad: " + estudiantesCargados.size(),
                        "Carga Exitosa",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                } else {
                    JOptionPane.showMessageDialog(
                        null,
                        "El archivo no contiene estudiantes.",
                        "Carga Incompleta",
                        JOptionPane.WARNING_MESSAGE
                    );
                }
            } catch (IOException e) {
                // Manejar errores de lectura o si el archivo es invÃ¡lido
                JOptionPane.showMessageDialog(
                    null,
                    "Error al leer el archivo: " + e.getMessage(),
                    "Error de Carga",
                    JOptionPane.ERROR_MESSAGE
                );
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnCargarCsvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new RegistroEstudianteFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCargarCsv;
    private javax.swing.JButton btnEstadistica;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarCsv;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEdad;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNota1;
    private javax.swing.JLabel lblNota2;
    private javax.swing.JLabel lblNota3;
    private javax.swing.JLabel lblNotaMax;
    private javax.swing.JLabel lblPromedio;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JTable tableEstudiantes;
    private javax.swing.JSpinner txtEdad;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNota1;
    private javax.swing.JTextField txtNota2;
    private javax.swing.JTextField txtNota3;
    // End of variables declaration//GEN-END:variables
}
